# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/multimedia/player_framework/config.gni")

config("screen_capture_test_config") {
  visibility = [ ":*" ]

  cflags = [
    "-std=c++17",
    "-fno-rtti",
    "-fno-exceptions",
    "-Wall",
    "-fno-common",
    "-fstack-protector-strong",
    "-Wshadow",
    "-FPIC",
    "-FS",
    "-O2",
    "-D_FORTIFY_SOURCE=2",
    "-Wformat=2",
    "-Wfloat-equal",
    "-Wdate-time",
    "-Werror",
    "-Wextra",
    "-Wimplicit-fallthrough",
    "-Wsign-compare",
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  if (player_framework_support_avsession_background) {
    cflags += [ "-Wno-unused-parameter" ]
  } else {
    cflags += [ "-Wunused-parameter" ]
  }

  include_dirs = [
    "avcodec/ipc",
    "avcodec/server",
    "//foundation/multimedia/player_framework/services/services/sa_media/ipc",
    "//foundation/multimedia/player_framework/services/services/sa_media/server",
    "//foundation/multimedia/player_framework/services/services/common",
    "//foundation/multimedia/player_framework/services/services/player/ipc",
    "//foundation/multimedia/player_framework/services/services/player/player_mem_manage",
    "//foundation/multimedia/player_framework/services/services/player/server",
    "//foundation/multimedia/player_framework/services/services/player/subscriber",
    "//foundation/multimedia/player_framework/services/services/media_data_source/ipc",
    "//foundation/multimedia/player_framework/services/services/media_data_source/server",
    "//foundation/multimedia/player_framework/services/services/monitor/client",
    "//foundation/multimedia/player_framework/services/services/monitor/ipc",
    "//foundation/multimedia/player_framework/services/services/monitor/server",
    "//foundation/multimedia/player_framework/services/services/recorder/ipc",
    "//foundation/multimedia/player_framework/services/services/recorder/server",
    "//foundation/multimedia/player_framework/services/services/avmetadatahelper/ipc",
    "//foundation/multimedia/player_framework/services/services/avmetadatahelper/server",
    "//foundation/multimedia/player_framework/services/services/avcodeclist/ipc",
    "//foundation/multimedia/player_framework/services/services/avcodeclist/server",
    "//foundation/multimedia/player_framework/services/services/recorder_profiles/ipc",
    "//foundation/multimedia/player_framework/services/services/recorder_profiles/server",
    "//foundation/multimedia/player_framework/services/services/screen_capture/server",
    "//foundation/multimedia/player_framework/services/services/screen_capture/ipc",
    "//foundation/multimedia/player_framework/services/services/screen_capture_monitor/server",
    "//foundation/multimedia/player_framework/services/services/screen_capture_monitor/ipc",
    "//foundation/multimedia/player_framework/services/services/transcoder/server",
    "//foundation/multimedia/player_framework/services/services/transcoder/ipc",
    "//foundation/multimedia/player_framework/services/services/observer",
    "//foundation/multimedia/player_framework/services/include",
    "//foundation/multimedia/player_framework/services/services/factory",
    "//foundation/multimedia/player_framework/services/services/engine_intf",
    "//foundation/multimedia/player_framework/services/utils/include",
    "//foundation/multimedia/player_framework/interfaces/inner_api/native",
    "//foundation/multimedia/player_framework/services/services/common",
    "//foundation/multimedia/player_framework/services/engine/common/recorder_profiles",
  ]

  if (player_framework_support_avsession_background) {
    include_dirs += [ "player/avsession_background" ]
  }

  defines = []
  defines += player_framework_defines

  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
}

module_output_path = "player_framework/screen_capture"

ohos_unittest("screen_capture_native_unit_test") {
  module_out_path = module_output_path
  include_dirs = [
    "./",
    "./screen_capture_unittest/include",
    "./native/include",
    "$MEDIA_PLAYER_ROOT_DIR/test/unittest/common/include",
    "$MEDIA_PLAYER_ROOT_DIR/interfaces/inner_api/native",
    "$MEDIA_PLAYER_GRAPHIC_SURFACE/interfaces/inner_api/surface",
  ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  cflags = [
    "-Wall",
    "-Werror",
  ]

  if (player_framework_support_screen_capture) {
    sources = [
      "native/screen_capture_mock_factory.cpp",
      "native/src/screen_capture_native_mock.cpp",
      "screen_capture_unittest/src/screen_capture_unit_test.cpp",
      "screen_capture_unittest/src/screen_capture_unit_test_exclude.cpp",
      "screen_capture_unittest/src/screen_capture_unit_test_state.cpp",
    ]
  }

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "ability_runtime:abilitykit_native",
    "ability_runtime:app_context",
    "ability_runtime:app_manager",
    "ability_runtime:data_ability_helper",
    "ability_runtime:mission_info",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken_shared",
    "access_token:libtokensetproc_shared",
    "av_codec:av_codec_client",
    "c_utils:utils",
    "graphic_surface:surface",
    "hilog:libhilog",
    "player_framework:media_client",
    "window_manager:libdm",
  ]

  resource_config_file = "../resources/ohos_test.xml"
}

##################################################################################################################

ohos_unittest("screen_capture_capi_unit_test") {
  module_out_path = module_output_path
  include_dirs = [
    "./",
    "./screen_capture_unittest/include",
    "./capi/include",
    "$MEDIA_PLAYER_ROOT_DIR/interfaces/kits/c",
    "$MEDIA_PLAYER_ROOT_DIR/test/unittest/common/include",
    "$MEDIA_PLAYER_ROOT_DIR/frameworks/native/capi/common",
    "$MEDIA_PLAYER_ROOT_DIR/interfaces/inner_api/native",
    "$MEDIA_PLAYER_GRAPHIC_SURFACE/interfaces/inner_api/surface",
  ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  cflags = [
    "-Wall",
    "-Werror",
  ]

  if (player_framework_support_screen_capture) {
    sources = [
      "capi/screen_capture_mock_factory.cpp",
      "capi/src/screen_capture_capi_mock.cpp",
      "screen_capture_unittest/src/screen_capture_unit_test.cpp",
      "screen_capture_unittest/src/screen_capture_unit_test_exclude.cpp",
      "screen_capture_unittest/src/screen_capture_unit_test_state.cpp",
    ]
  }

  deps = [ "$MEDIA_PLAYER_ROOT_DIR/interfaces/kits/c:native_avscreen_capture" ]

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "ability_runtime:abilitykit_native",
    "ability_runtime:app_context",
    "ability_runtime:app_manager",
    "ability_runtime:data_ability_helper",
    "ability_runtime:mission_info",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken_shared",
    "access_token:libtokensetproc_shared",
    "av_codec:av_codec_client",
    "c_utils:utils",
    "graphic_surface:surface",
    "hilog:libhilog",
    "media_foundation:media_foundation",
    "player_framework:media_client",
    "window_manager:libdm",
  ]

  resource_config_file = "../resources/ohos_test.xml"
}

##################################################################################################################

ohos_unittest("screen_capture_server_function_unit_test") {
  module_out_path = module_output_path

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  public_deps = [ "$MEDIA_PLAYER_ROOT_DIR/services/services:media_service" ]

  configs = [ ":screen_capture_test_config" ]

  deps = [ "$MEDIA_PLAYER_ROOT_DIR/interfaces/kits/c:native_avscreen_capture" ]

  if (player_framework_support_screen_capture) {
    sources = [
      "screen_capture_server_function_unittest/screen_capture_server_function_unittest_voip.cpp",
    ]
  }

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "ability_runtime:abilitykit_native",
    "ability_runtime:app_context",
    "ability_runtime:app_manager",
    "ability_runtime:data_ability_helper",
    "ability_runtime:mission_info",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken_shared",
    "access_token:libtokensetproc_shared",
    "av_codec:av_codec_client",
    "c_utils:utils",
    "graphic_surface:surface",
    "hilog:libhilog",
    "media_foundation:media_foundation",
    "player_framework:media_client",
    "window_manager:libdm",
  ]

  resource_config_file = "../resources/ohos_test.xml"
}