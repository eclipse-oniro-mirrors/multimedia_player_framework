# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/multimedia/player_framework/config.gni")

module_output_path = "player_framework/ScreenCapture/observer"

ohos_unittest("incall_observer_unit_test") {
  module_out_path = module_output_path

  include_dirs = [
    "./",
    "$MEDIA_PLAYER_ROOT_DIR/test/unittest/common/include",
    "$MEDIA_PLAYER_ROOT_DIR/interfaces/inner_api/native",
    "$MEDIA_PLAYER_ROOT_DIR/services/services/observer",
  ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  cflags = [
    "-Wall",
    "-Werror",
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  if (player_framework_support_screen_capture &&
      player_framework_support_screen_capture_stopbycall) {
    sources = [ "./observer_unittest/incall_observer_func_unittest.cpp" ]
  }

  public_deps = [ "$MEDIA_PLAYER_ROOT_DIR/services/services:media_service" ]

  deps = [
    "$MEDIA_PLAYER_ROOT_DIR/services/dfx:media_service_dfx",
    "$MEDIA_PLAYER_ROOT_DIR/services/dfx:media_service_log_dfx",
    "$MEDIA_PLAYER_ROOT_DIR/services/utils:media_service_utils",
  ]

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "ability_runtime:app_manager",
    "ability_runtime:mission_info",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken_shared",
    "access_token:libtokensetproc_shared",
    "audio_framework:audio_client",
    "av_codec:av_codec_client",
    "c_utils:utils",
    "graphic_surface:surface",
    "hilog:libhilog",
    "init:libbegetutil",
    "player_framework:media_client",
    "qos_manager:qos",
    "window_manager:libdm",
  ]
  if (player_framework_support_screen_capture &&
      player_framework_support_screen_capture_stopbycall) {
    external_deps += [
      "call_manager:tel_call_manager_api",
      "core_service:tel_core_service_api",
      "state_registry:tel_state_registry_api",
    ]
  }
  defines = []
  defines += player_framework_defines

  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
}

ohos_unittest("account_observer_unit_test") {
  module_out_path = module_output_path

  include_dirs = [
    "./",
    "$MEDIA_PLAYER_ROOT_DIR/test/unittest/common/include",
    "$MEDIA_PLAYER_ROOT_DIR/interfaces/inner_api/native",
    "$MEDIA_PLAYER_ROOT_DIR/services/services/observer",
  ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  cflags = [
    "-Wall",
    "-Werror",
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  if (player_framework_support_screen_capture) {
    sources = [ "./observer_unittest/account_observer_func_unittest.cpp" ]
  }

  public_deps = [ "$MEDIA_PLAYER_ROOT_DIR/services/services:media_service" ]

  deps = [
    "$MEDIA_PLAYER_ROOT_DIR/services/dfx:media_service_dfx",
    "$MEDIA_PLAYER_ROOT_DIR/services/dfx:media_service_log_dfx",
    "$MEDIA_PLAYER_ROOT_DIR/services/utils:media_service_utils",
  ]

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "ability_runtime:app_manager",
    "ability_runtime:mission_info",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken_shared",
    "access_token:libtokensetproc_shared",
    "audio_framework:audio_client",
    "av_codec:av_codec_client",
    "c_utils:utils",
    "call_manager:tel_call_manager_api",
    "core_service:tel_core_service_api",
    "graphic_surface:surface",
    "hilog:libhilog",
    "init:libbegetutil",
    "os_account:os_account_innerkits",
    "player_framework:media_client",
    "qos_manager:qos",
    "state_registry:tel_state_registry_api",
    "window_manager:libdm",
    "eventhandler:libeventhandler",
  ]

  defines = []
  defines += player_framework_defines

  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
}
