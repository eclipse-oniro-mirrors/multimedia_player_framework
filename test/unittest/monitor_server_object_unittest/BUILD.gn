# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/multimedia/player_framework/config.gni")

module_output_path = "player_framework/player_framework/player"

config("monitor_server_object_unittest_config") {

  cflags = [
    "-O2",
    "-fPIC",
    "-Wall",
    "-fexceptions",
    "-fno-rtti",
    "-Wno-unused-but-set-variable",
    "-Wno-format",
    "-Dprivate=public",
    "-Dprotected=public",
  ]
  cflags_cc = cflags
  include_dirs = [
    "./",
    "$MEDIA_PLAYER_ROOT_DIR/interfaces/inner_api/native",
    "$MEDIA_PLAYER_ROOT_DIR/services/services/monitor/server/",
    "$MEDIA_PLAYER_ROOT_DIR/services/utils/include",
  ]
  defines = []

  defines += player_framework_defines
}

ohos_unittest("monitor_server_object_unittest") {
  module_out_path = module_output_path
  stack_protector_ret = true

  sources = [
    "$MEDIA_PLAYER_ROOT_DIR/services/services/monitor/server/monitor_server_object.cpp",
    "./monitor_server_object_unittest.cpp",
  ]

  configs = [
    ":monitor_server_object_unittest_config",
  ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  external_deps = [
    "c_utils:utils",
    "googletest:gmock",
    "graphic_surface:surface",
    "graphic_surface:sync_fence",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "hitrace:libhitracechain",
    "init:libbegetutil",
    "ipc:ipc_single",
    "libxml2:libxml2",
    "media_foundation:media_foundation",
  ]

  if (player_framework_support_drm) {
    external_deps += [ "drm_framework:drm_framework" ]
  }

  deps = [
    "$MEDIA_PLAYER_ROOT_DIR/services/dfx:media_service_log_dfx",
    "$MEDIA_PLAYER_ROOT_DIR/services/engine/histreamer/player:media_engine_histreamer_player",
    "$MEDIA_PLAYER_ROOT_DIR/services/utils:media_service_utils",
  ]

  deps = []
}
