# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/multimedia/player_framework/config.gni")

module_output_path = "player_framework/lpp_unit_test"

config("lpp_video_callback_looper_unit_test_config") {
  visibility = [ ":*" ]

  cflags = [
    "-O2",
    "-fPIC",
    "-Wall",
    "-fexceptions",
    "-fno-rtti",
    "-Wno-unused-but-set-variable",
    "-Wno-format",
    "-Dprivate=public",
    "-Dprotected=public",
  ]
  cflags_cc = cflags
  include_dirs = [
    "./",
    "./mock/",
    "$MEDIA_PLAYER_ROOT_DIR/frameworks/native/common/",
    "$MEDIA_PLAYER_ROOT_DIR/interfaces/inner_api/native",
    "$MEDIA_PLAYER_ROOT_DIR/services/dfx",
    "$MEDIA_PLAYER_ROOT_DIR/services/services/engine_intf",
    "$MEDIA_PLAYER_ROOT_DIR/services/utils/include",
  ]
  defines = []

  defines += player_framework_defines
}

ohos_unittest("lpp_video_callback_looper_unit_test") {
  module_out_path = module_output_path
  stack_protector_ret = true

  sources = []

  if (player_framework_support_lowpower_av_sink) {
    sources += [
      "$MEDIA_PLAYER_ROOT_DIR/services/engine/histreamer/lpp/lpp_video_streamer/src/lpp_video_callback_looper.cpp",
      "lpp_video_callback_looper_unit_test.cpp",
    ]
  }

  configs = [
    ":lpp_video_callback_looper_unit_test_config",
    "$MEDIA_PLAYER_ROOT_DIR/services/dfx:media_service_log_dfx_public_config",
    "$MEDIA_PLAYER_ROOT_DIR/services/utils:media_service_utils_public_config",
  ]

  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = true
  }

  external_deps = [
    "av_codec:av_codec_client",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "googletest:gmock_main",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "hitrace:libhitracechain",
    "init:libbegetutil",
    "ipc:ipc_single",
    "media_foundation:media_foundation",
    "safwk:system_ability_fwk",
  ]

  if (player_framework_support_drm) {
    external_deps += [ "drm_framework:drm_framework" ]
  }

  if (player_framework_support_lowpower_av_sink) {
    external_deps += [
      "drivers_interface_lpplayer:liblow_power_player_proxy_1.0",
      "hdf_core:libhdi",
    ]
  }

  deps = [
    "$MEDIA_PLAYER_ROOT_DIR/services/dfx:media_service_log_dfx",
    "$MEDIA_PLAYER_ROOT_DIR/services/utils:media_service_utils",
  ]
}
