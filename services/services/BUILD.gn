# Copyright (C) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/multimedia/player_framework/config.gni")

config("media_service_config") {
  visibility = [ ":*" ]

  cflags = [
    "-std=c++17",
    "-fno-rtti",
    "-fno-exceptions",
    "-Wall",
    "-fno-common",
    "-fstack-protector-strong",
    "-Wshadow",
    "-FPIC",
    "-FS",
    "-O2",
    "-D_FORTIFY_SOURCE=2",
    "-Wformat=2",
    "-Wfloat-equal",
    "-Wdate-time",
    "-Werror",
    "-Wextra",
    "-Wimplicit-fallthrough",
    "-Wsign-compare",
  ]

  if (player_framework_support_avsession_background) {
    cflags += [ "-Wno-unused-parameter" ]
  } else {
    cflags += [ "-Wunused-parameter" ]
  }

  include_dirs = [
    "sa_media/ipc",
    "sa_media/server",
    "common",
    "player/ipc",
    "player/player_mem_manage",
    "player/server",
    "player/subscriber",
    "media_data_source/ipc",
    "media_data_source/server",
    "monitor/client",
    "monitor/ipc",
    "monitor/server",
    "recorder/ipc",
    "recorder/server",
    "avmetadatahelper/ipc",
    "avmetadatahelper/server",
    "avcodec/ipc",
    "avcodec/server",
    "avcodeclist/ipc",
    "avcodeclist/server",
    "recorder_profiles/ipc",
    "recorder_profiles/server",
    "screen_capture/server",
    "screen_capture/ipc",
    "screen_capture_monitor/server",
    "screen_capture_monitor/ipc",
    "transcoder/server",
    "transcoder/ipc",
    "observer",
    "//foundation/multimedia/player_framework/services/include",
    "//foundation/multimedia/player_framework/services/services/factory",
    "//foundation/multimedia/player_framework/services/services/engine_intf",
    "//foundation/multimedia/player_framework/services/utils/include",
    "//foundation/multimedia/player_framework/interfaces/inner_api/native",
    "//foundation/multimedia/player_framework/services/services/common",
    "//foundation/multimedia/player_framework/services/engine/common/recorder_profiles",
  ]

  if (player_framework_support_avsession_background) {
    include_dirs += [ "player/avsession_background" ]
  }

  defines = []
  defines += player_framework_defines

  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
}

ohos_shared_library("media_service") {
  stack_protector_ret = true
  install_enable = true

  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [
    "//foundation/multimedia/player_framework/frameworks/native/common/media_errors.cpp",
    "common/avsharedmemory_ipc.cpp",
    "factory/engine_factory_repo.cpp",
    "monitor/ipc/monitor_service_stub.cpp",
    "monitor/server/monitor_server.cpp",
    "monitor/server/monitor_server_object.cpp",
    "sa_media/ipc/media_listener_proxy.cpp",
    "sa_media/ipc/media_parcel.cpp",
    "sa_media/ipc/media_service_stub.cpp",
    "sa_media/server/media_server.cpp",
    "sa_media/server/media_server_manager.cpp",
  ]
  if (player_framework_support_player) {
    sources += [
      "media_data_source/ipc/media_data_source_proxy.cpp",
      "player/ipc/player_listener_proxy.cpp",
      "player/ipc/player_service_stub.cpp",
      "player/server/player_server.cpp",
      "player/server/player_server_event_receiver.cpp",
      "player/server/player_server_state.cpp",
      "player/server/player_server_task_mgr.cpp",
      "player/subscriber/account_subscriber.cpp",
    ]
    if (use_memmgr_plugin || use_memmgr) {
      sources += [
        "player/player_mem_manage/app_state_listener.cpp",
        "player/player_mem_manage/player_mem_manage.cpp",
        "player/player_mem_manage/player_server_mem.cpp",
        "player/player_mem_manage/player_server_mem_state.cpp",
        "player/player_mem_manage/player_service_stub_mem.cpp",
      ]
    }
  }
  if (player_framework_support_recorder) {
    sources += [
      "//foundation/multimedia/player_framework/services/engine/common/recorder_profiles/recorder_profiles_ability_singleton.cpp",
      "//foundation/multimedia/player_framework/services/engine/common/recorder_profiles/recorder_profiles_xml_parser.cpp",
      "recorder/ipc/recorder_listener_proxy.cpp",
      "recorder/ipc/recorder_service_stub.cpp",
      "recorder/server/recorder_server.cpp",
      "recorder_profiles/ipc/recorder_profiles_service_stub.cpp",
      "recorder_profiles/server/recorder_profiles_server.cpp",
      "sa_media/ipc/recorder_profiles_parcel.cpp",
    ]
  }

  if (player_framework_support_metadata) {
    sources += [
      "avmetadatahelper/ipc/avmetadatahelper_service_stub.cpp",
      "avmetadatahelper/ipc/helper_listener_proxy.cpp",
      "avmetadatahelper/server/avmetadatahelper_server.cpp",
    ]
  }

  if (player_framework_support_screen_capture) {
    sources += [
      "screen_capture/ipc/screen_capture_controller_stub.cpp",
      "screen_capture/ipc/screen_capture_listener_proxy.cpp",
      "screen_capture/ipc/screen_capture_service_stub.cpp",
      "screen_capture/server/audio_capturer_wrapper.cpp",
      "screen_capture/server/screen_capture_controller_server.cpp",
      "screen_capture/server/screen_capture_server.cpp",
      "screen_capture/server/ui_extension_ability_connection.cpp",
      "screen_capture_monitor/ipc/screen_capture_monitor_listener_proxy.cpp",
      "screen_capture_monitor/ipc/screen_capture_monitor_service_stub.cpp",
      "screen_capture_monitor/server/screen_capture_monitor_server.cpp",
    ]
  }

  if (player_framework_support_screen_capture_stopbycall) {
    sources += [
      "observer/incall_observer.cpp",
      "observer/media_telephony_listener.cpp",
    ]
  }

  if (player_framework_support_transcoder) {
    sources += [
      "transcoder/ipc/transcoder_listener_proxy.cpp",
      "transcoder/ipc/transcoder_service_stub.cpp",
      "transcoder/server/transcoder_server.cpp",
    ]
  }

  configs = [
    ":media_service_config",
    "//foundation/multimedia/player_framework/services/dfx:media_service_log_dfx_public_config",
  ]

  deps = [
    "//foundation/multimedia/player_framework/services/dfx:media_service_dfx",
    "//foundation/multimedia/player_framework/services/dfx:media_service_log_dfx",
    "//foundation/multimedia/player_framework/services/utils:media_service_utils",
  ]

  external_deps = [
    "ability_runtime:ability_connect_callback_stub",
    "access_token:libaccesstoken_sdk",
    "audio_framework:audio_client",
    "av_codec:av_codec_client",
    "c_utils:utils",
    "call_manager:tel_call_manager_api",
    "common_event_service:cesfwk_innerkits",
    "core_service:tel_core_service_api",
    "hdf_core:libhdi",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "hitrace:libhitracechain",
    "i18n:intl_util",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_single",
    "libxml2:libxml2",
    "media_foundation:media_foundation",
    "memmgr:memmgrclient",
    "napi:ace_napi",
    "os_account:os_account_innerkits",
    "qos_manager:concurrent_task_client",
    "qos_manager:qos",
    "resource_schedule_service:ressched_client",
    "safwk:system_ability_fwk",
    "state_registry:tel_state_registry_api",
  ]

  if (player_framework_support_video) {
    external_deps += [ "graphic_surface:surface" ]
  }

  if (player_framework_support_screen_capture) {
    external_deps += [
      "ability_base:base",
      "ability_base:want",
      "ability_base:zuri",
      "ability_runtime:ability_context_native",
      "ability_runtime:abilitykit_native",
      "ability_runtime:extension_manager",
      "ability_runtime:runtime",
      "access_token:libnativetoken_shared",
      "access_token:libprivacy_sdk",
      "access_token:libtokensetproc_shared",
      "audio_framework:audio_capturer",
      "audio_framework:audio_client",
      "distributed_notification_service:ans_innerkits",
      "relational_store:native_rdb",
      "window_manager:libdm",
    ]
  }

  if (player_framework_support_avsession_background) {
    sources += [ "player/avsession_background/avsession_background.cpp" ]
    external_deps += [
      "ability_base:want",
      "ability_runtime:wantagent_innerkits",
      "audio_framework:audio_client",
      "av_session:avsession_client",
      "input:libmmi-client",
    ]
  }

  if (use_memmgr_plugin) {
    external_deps += [ "memmgr_override:memmgrclient" ]
  } else if (use_memmgr) {
    external_deps += [ "memmgr:memmgrclient" ]
  }

  if (player_framework_support_drm) {
    external_deps += [ "drm_framework:drm_framework" ]
  }

  if (player_framework_support_power_manager) {
    external_deps += [ "power_manager:powermgr_client" ]
  }

  subsystem_name = "multimedia"
  part_name = "player_framework"
}
