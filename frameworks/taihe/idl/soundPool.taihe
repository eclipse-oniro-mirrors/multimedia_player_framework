/*
 * Copyright (C) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@!namespace("multimedia.soundPool")

@!sts_inject("""
import { BusinessError, ErrorCallback, AsyncCallback, Callback } from '@ohos.base';
""")

struct PlayParameters {
  loop: Optional<i32>;
  rate: Optional<i32>;
  leftVolume: Optional<f64>;
  rightVolume: Optional<f64>;
  priority: Optional<i32>;
  parallelPlayFlag: Optional<bool>;
}

interface SoundPool {
    @gen_async("load")
    @gen_promise("load")
    LoadSync(uri: String): i32;

    @gen_async("load")
    @gen_promise("load")
    LoadWithFdSync(fd: i32, offset: f64, length: f64): i32;

    @gen_async("play")
    @gen_promise("play")
    PlaySync(soundID: i32, params: Optional<PlayParameters>): i32;

    @gen_async("stop")
    @gen_promise("stop")
    StopSync(streamID: i32): void;

    @gen_async("setLoop")
    @gen_promise("setLoop")
    SetLoopSync(streamID: i32, loop: i32): void;

    @gen_async("setPriority")
    @gen_promise("setPriority")
    SetPrioritySync(streamID: i32, priority: i32): void;

    @gen_async("setVolume")
    @gen_promise("setVolume")
    SetVolumeSync(streamID: i32, leftVolume: f64, rightVolume: f64): void;

    @gen_async("unload")
    @gen_promise("unload")
    UnloadSync(soundID: i32): void;

    @gen_async("release")
    @gen_promise("release")
    ReleaseSync(): void;

    @!sts_inject_into_interface("on(type: 'playFinishedWithStreamId' | 'playFinished' | 'error' | 'loadComplete', callback: Callback<int> | Callback<void> | ErrorCallback<BusinessError>): void;")
    @!sts_inject_into_interface("on(type: string, callback: (data: object)=> void): void;")
    @!sts_inject_into_class("""on(type: string, callback: object): void {
        if (type === "playFinishedWithStreamId") {
            this.OnPlayFinishedWithStreamId_inner(callback as (data: int)=> void);
        } else if (type === "error") {
            this.OnError_inner(callback as (err: BusinessError<void>)=> void);
        } else if (type === "loadComplete") {
            this.OnLoadComplete_inner(callback as (data: int)=> void);
        } else if (type === "playFinished") {
            this.OnPlayFinished_inner(callback as (data: undefined)=> void);
        } else {
            throw new Error(`Unknown type: ${type}`);
        }
    }""")

    @!sts_inject_into_interface("off(type: string): void;")
    @!sts_inject_into_class("""off(type: string): void {
        if (type === "playFinishedWithStreamId") {
            this.OffPlayFinishedWithStreamId_inner();
        } else if (type === "error") {
            this.OffError_inner();
        } else if (type === "loadComplete") {
            this.OffLoadComplete_inner();
        } else if (type === "playFinished") {
            this.OffPlayFinished_inner();
        } else {
            throw new Error(`Unknown type: ${type}`);
        }
    }""")

    OnError(callback: (err: @sts_type("BusinessError<void>") Opaque)=> void): void;
    OffError(): void;

    OnPlayFinishedWithStreamId(callback: (data: i32) => void): void;
    OffPlayFinishedWithStreamId();

    OnLoadComplete(callback: (data: i32) => void): void;
    OffLoadComplete();

    OnPlayFinished(callback: (data: @sts_type("undefined") Opaque) => void): void;
    OffPlayFinished();
}
