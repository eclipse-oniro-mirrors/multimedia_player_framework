# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/multimedia/player_framework/config.gni")
import("./../../../multimedia_player_framework_aafwk.gni")

ohos_shared_library("video_editor") {
  version_script = "video_editor.versionscript"
  stack_protector_ret = true
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  install_enable = true
  sources = [
    "./codec/audio/decoder/audio_decoder.cpp",
    "./codec/audio/encoder/audio_encoder.cpp",
    "./codec/audio/pcm_buffer_queue.cpp",
    "./codec/common/codec_decoder.cpp",
    "./codec/common/codec_encoder.cpp",
    "./codec/util/codec_util.cpp",
    "./codec/video/decoder/video_decoder.cpp",
    "./codec/video/decoder/video_decoder_engine.cpp",
    "./codec/video/decoder/video_decoder_engine_impl.cpp",
    "./codec/video/decoder/video_demuxer.cpp",
    "./codec/video/encoder/video_encoder.cpp",
    "./codec/video/encoder/video_encoder_engine.cpp",
    "./codec/video/encoder/video_encoder_engine_impl.cpp",
    "./codec/video/encoder/video_muxer.cpp",
    "./composite_engine/impl/composite_engine.cpp",
    "./composite_engine/impl/video_composite_engine.cpp",
    "./data_center/asset/asset.cpp",
    "./data_center/asset/asset_factory.cpp",
    "./data_center/asset/video_asset.cpp",
    "./data_center/effect/effect.cpp",
    "./data_center/effect/effect_factory.cpp",
    "./data_center/effect/effect_image_effect.cpp",
    "./data_center/impl/data_center_impl.cpp",
    "./render/graphics/base/gl_utils.cpp",
    "./render/graphics/base/render_attribute.cpp",
    "./render/graphics/base/render_context.cpp",
    "./render/graphics/base/render_surface.cpp",
    "./render/graphics/base/render_texture.cpp",
    "./render/graphics/base/shader_pass/render_general_program.cpp",
    "./render/graphics/base/shader_pass/render_mesh.cpp",
    "./render/graphics/base/shader_pass/render_program.cpp",
    "./render/graphics/base/shader_pass/shader_pass.cpp",
    "./render/graphics/base/shader_pass/shader_pass_on_screen.cpp",
    "./render/graphics/base/shader_pass/shader_pass_program.cpp",
    "./render/graphics/base/shader_pass/shader_pass_rotate.cpp",
    "./render/graphics/base/shader_pass/shader_pass_surface.cpp",
    "./render/graphics/base/surface_texture.cpp",
    "./render/graphics/effect/image_effect_render.cpp",
    "./render/graphics/render_engine/graphics_render_engine.cpp",
    "./render/graphics/render_engine/graphics_render_engine_impl.cpp",
    "./util/task/task_manager.cpp",
    "./video_editor_impl.cpp",
    "./video_editor_manager.cpp",
  ]

  include_dirs = [
    "./",
    "${multimedia_player_framework_path}/interfaces/inner_api/native/video_editor/include",
    "${multimedia_player_framework_path}/services/utils/include",
  ]

  deps = []

  external_deps = [
    "av_codec:av_codec_client",
    "av_codec:native_media_acodec",
    "av_codec:native_media_adec",
    "av_codec:native_media_aenc",
    "av_codec:native_media_avcencinfo",
    "av_codec:native_media_avdemuxer",
    "av_codec:native_media_avmuxer",
    "av_codec:native_media_avsource",
    "av_codec:native_media_codecbase",
    "av_codec:native_media_vdec",
    "av_codec:native_media_venc",
    "ffrt:libffrt",
    "graphic_2d:EGL",
    "graphic_2d:GLESv3",
    "graphic_2d:libnative_image",
    "graphic_surface:surface",
    "hilog:libhilog",
    "media_foundation:native_media_core",
    "skia:skia_canvaskit",
  ]

  defines = []

  if (defined(global_parts_info) &&
      defined(global_parts_info.multimedia_image_effect) &&
      global_parts_info.multimedia_image_effect) {
    defines += [ "IMAGE_EFFECT_SUPPORT" ]
    external_deps += [ "image_effect:image_effect" ]
  }

  cflags = [
    "-fno-exceptions",
    "-Wall",
    "-Werror",
    "-fno-common",
    "-fstack-protector-strong",
    "-FPIC",
    "-FS",
    "-D_FORTIFY_SOURCE=2",
    "-fvisibility=hidden",
    "-fdata-sections",
    "-ffunction-sections",
    "-fno-asynchronous-unwind-tables",
    "-fno-unwind-tables",
    "-O2",
  ]

  cflags_cc = cflags

  cflags_cc += [
    "-std=c++17",
    "-fno-rtti",
    "-fvisibility-inlines-hidden",
    "-Wunused-private-field",
    "-Wunused-but-set-parameter",
    "-Wunused-but-set-variable",
    "-Wunused-const-variable",
    "-Wunused-function",
    "-Wunused-label",
    "-Wunused-local-typedefs",
    "-Wunused-macros",
    "-Wunused-parameter",
    "-Wunused-result",
    "-Wunused-value",
    "-Wunused-variable",
    "-Wunreachable-code",
  ]

  public_configs = []

  innerapi_tags = [ "platformsdk" ]
  subsystem_name = "multimedia"
  part_name = "player_framework"
}
